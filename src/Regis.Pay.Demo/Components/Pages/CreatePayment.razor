@page "/create-payment"
@using System.Text.Json
@using Regis.Pay.Common.EventStore

@inject RegisPayApiClient apiClient
@inject CosmosDbService CosmosService


<PageTitle>Create Payment</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Create Payment</MudText>
<MudText Typo="Typo.body1" Class="mb-8">This demo ui allows you to tigger a payment.</MudText>

<MudPaper Class="p-6 mx-auto max-w-screen-sm mt-10" Elevation="8">

    <MudTextField @bind-Value="Amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.Start" />
    <MudTextField @bind-Value="Currency" Label="Currency" Variant="Variant.Outlined" />

    <MudButton Color="Color.Primary" OnClick="SendRequest" Class="mt-4" Variant="Variant.Filled">
        Send
    </MudButton>

    @if (!string.IsNullOrWhiteSpace(ResponseText))
    {
        <MudAlert Severity="Severity.Info" Class="mt-4">
            <pre>@ResponseText</pre>
        </MudAlert>
    }

    @if (!string.IsNullOrWhiteSpace(ErrorText))
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">
            <pre>@ErrorText</pre>
        </MudAlert>
    }
</MudPaper>


@if (Events is not null && Events.Any())
{
    <MudPaper Class="p-6 mx-auto max-w-screen-sm mt-10" Elevation="8">
        <MudExpansionPanels>
            @foreach (var @event in Events)
            {
                <MudExpansionPanel Text="@(@event.EventType)" MaxHeight="500">
                    <MudText>@(JsonSerializer.Serialize(@event))</MudText>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudPaper>}

@if (isLoadingEvents)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    <p>Loading payment events, please wait...</p>
}


@code {
    public decimal Amount { get; set; } = 100;
    public string Currency { get; set; } = "EUR";
    public string? ResponseText { get; set; }
    public string? ErrorText { get; set; }
    private List<EventWrapper>? Events;
    private bool isLoadingEvents = false;


    private async Task SendRequest()
    {
        ErrorText = ResponseText = string.Empty;

        var request = new
        {
            amount = Amount,
            currency = Currency
        };

        try
        {

            var response = await apiClient.CreatePayment(new RegisPayPaymentRequest(Amount, Currency));

            ResponseText = JsonSerializer.Serialize(response);

            await LoadPaymentDetails(response.PaymentId);
        }
        catch (Exception ex)
        {
            ErrorText = $"Exception: {ex.Message}";
        }
    }

    private async Task LoadPaymentDetails(Guid paymentId)
    {
        var sqlQueryText = $"SELECT * FROM events e WHERE e.stream.id = 'pay:{paymentId}' ORDER BY e.stream.version";

        isLoadingEvents = true;

        for (int i = 0; i < 20; i++)
        {
            Events = await CosmosService.GetItemsAsync<EventWrapper>(sqlQueryText);

            StateHasChanged();
            await Task.Delay(1000);
        }

        isLoadingEvents = false;
    }
}